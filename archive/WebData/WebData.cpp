// WebData.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
std::string webData();
int main()
{
    std::cout << webData(); 
}

std::string webData() {
	//http://tomeko.net/online_tools/cpp_text_escape.php?lang=en
	return (
		"<!DOCTYPE html>\r\n"
		"<html>\r\n"
		"<head>\r\n"
		"    <title> ssid</title>\r\n"
		"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.7, maximum-scale=0.7\">\r\n"
		"    <meta charset=\"utf-8\">\r\n"
		"    <style>\r\n"
		"        body { text-align: center; font-size: width/2pt; }\r\n"
		"        h1 { font-weight: bold; font-size: width/2pt; }\r\n"
		"        h2 { font-weight: bold; font-size: width/2pt; }\r\n"
		"        button { font-weight: bold; font-size: width/2pt; }\r\n"
		"    </style>\r\n"
		"    <script>\r\n"
		"        var canvas_width = 500, canvas_height = 500;\r\n"
		"        var radius_base = 150;\r\n"
		"        var radius_handle = 72;\r\n"
		"        var radius_shaft = 120;\r\n"
		"        var range = canvas_width/2 - 10;\r\n"
		"        var step = 18;\r\n"
		"        var ws;\r\n"
		"        var joystick = {x:0, y:0};\r\n"
		"        var click_state = 0;\r\n"
		"        var ratio = 1;\r\n"
		"        function init()\r\n"
		"        {\r\n"
		"            var width = window.innerWidth;\r\n"
		"            var height = window.innerHeight;\r\n"
		"            if(width < height)\r\n"
		"                ratio = (width - 50) / canvas_width;\r\n"
		"            else\r\n"
		"                ratio = (height - 50) / canvas_width;\r\n"
		"            canvas_width = Math.round(canvas_width*ratio);\r\n"
		"            canvas_height = Math.round(canvas_height*ratio);\r\n"
		"            radius_base = Math.round(radius_base*ratio);\r\n"
		"            radius_handle = Math.round(radius_handle*ratio);\r\n"
		"            radius_shaft = Math.round(radius_shaft*ratio);\r\n"
		"            range = Math.round(range*ratio);\r\n"
		"            step = Math.round(step*ratio);\r\n"
		"            var canvas = document.getElementById(\"remote\");\r\n"
		"            //canvas.style.backgroundColor = \"#999999\";\r\n"
		"            canvas.width = canvas_width;\r\n"
		"            canvas.height = canvas_height;\r\n"
		"            canvas.addEventListener(\"touchstart\", mouse_down);\r\n"
		"            canvas.addEventListener(\"touchend\", mouse_up);\r\n"
		"            canvas.addEventListener(\"touchmove\", mouse_move);\r\n"
		"            canvas.addEventListener(\"mousedown\", mouse_down);\r\n"
		"            canvas.addEventListener(\"mouseup\", mouse_up);\r\n"
		"            canvas.addEventListener(\"mousemove\", mouse_move);\r\n"
		"            var ctx = canvas.getContext(\"2d\");\r\n"
		"            ctx.translate(canvas_width/2, canvas_height/2);\r\n"
		"            ctx.shadowBlur = 20;\r\n"
		"            ctx.shadowColor = \"LightGray\";\r\n"
		"            ctx.lineCap=\"round\";\r\n"
		"            ctx.lineJoin=\"round\";\r\n"
		"            update_view();\r\n"
		"        }\r\n"
		"        function connect_onclick()\r\n"
		"        {\r\n"
		"            if(ws == null)\r\n"
		"            {\r\n"
		"                //var ws_host_addr = \"<?echo _SERVER(\"HTTP_HOST\")?>\";\r\n"
		"                //if((navigator.platform.indexOf(\"Win\") != -1) && (ws_host_addr.charAt(0) == \"[\"))\r\n"
		"                {\r\n"
		"                    // network resource identifier to UNC path name conversion\r\n"
		"                    //ws_host_addr = ws_host_addr.replace(/[\\[\\]]/g, '');\r\n"
		"                    //ws_host_addr = ws_host_addr.replace(/:/g, \"-\");\r\n"
		"                    //ws_host_addr += \".ipv6-literal.net\";\r\n"
		"                }\r\n"
		"                //ws = new WebSocket(\"ws://\" + ws_host_addr + \"/web_joystick\", \"text.phpoc\");\r\n"
		"                ws = new WebSocket(\"ws://192.168.11.4:90/test/\");\r\n"
		"                document.getElementById(\"ws_state\").innerHTML = \"CONNECTING\";\r\n"
		"                ws.onopen = ws_onopen;\r\n"
		"                ws.onclose = ws_onclose;\r\n"
		"                ws.onmessage = ws_onmessage;\r\n"
		"            }\r\n"
		"            else\r\n"
		"                ws.close();\r\n"
		"        }\r\n"
		"        function ws_onopen()\r\n"
		"        {\r\n"
		"            document.getElementById(\"ws_state\").innerHTML = \"<font color='blue'>CONNECTED</font>\";\r\n"
		"            document.getElementById(\"bt_connect\").innerHTML = \"Disconnect\";\r\n"
		"            update_view();\r\n"
		"        }\r\n"
		"        function ws_onclose()\r\n"
		"        {\r\n"
		"            document.getElementById(\"ws_state\").innerHTML = \"<font color='gray'>CLOSED</font>\";\r\n"
		"            document.getElementById(\"bt_connect\").innerHTML = \"Connect\";\r\n"
		"            ws.onopen = null;\r\n"
		"            ws.onclose = null;\r\n"
		"            ws.onmessage = null;\r\n"
		"            ws = null;\r\n"
		"            update_view();\r\n"
		"        }\r\n"
		"        function ws_onmessage(e_msg)\r\n"
		"        {\r\n"
		"            e_msg = e_msg || window.event; // MessageEvent\r\n"
		"        }\r\n"
		"        function send_data()\r\n"
		"        {\r\n"
		"            var x = joystick.x, y = joystick.y;\r\n"
		"            var joystick_range = range - radius_handle;\r\n"
		"            x = Math.round(x*100/joystick_range);\r\n"
		"            y = Math.round(-(y*100/joystick_range));\r\n"
		"            var msg={\r\n"
		"                xVal: x,\r\n"
		"                yVal: y\r\n"
		"            }\r\n"
		"            if(ws != null)\r\n"
		"                //ws.send(x + \":\" + y + \"\\r\\n\");\r\n"
		"                ws.send(JSON.stringify(msg));\r\n"
		"        }\r\n"
		"        function update_view()\r\n"
		"        {\r\n"
		"            var x = joystick.x, y = joystick.y;\r\n"
		"            var canvas = document.getElementById(\"remote\");\r\n"
		"            var ctx = canvas.getContext(\"2d\");\r\n"
		"            ctx.clearRect(-canvas_width/2, -canvas_height/2, canvas_width, canvas_height);\r\n"
		"            ctx.lineWidth = 3;\r\n"
		"            ctx.strokeStyle=\"gray\";\r\n"
		"            ctx.fillStyle = \"LightGray\";\r\n"
		"            ctx.beginPath();\r\n"
		"            ctx.arc(0, 0, range, 0, 2 * Math.PI);\r\n"
		"            ctx.stroke();\r\n"
		"            ctx.fill();\r\n"
		"            ctx.strokeStyle=\"black\";\r\n"
		"            ctx.fillStyle = \"hsl(0, 0%, 35%)\";\r\n"
		"            ctx.beginPath();\r\n"
		"            ctx.arc(0, 0, radius_base, 0, 2 * Math.PI);\r\n"
		"            ctx.stroke();\r\n"
		"            ctx.fill();\r\n"
		"            ctx.strokeStyle=\"red\";\r\n"
		"            var lineWidth = radius_shaft;\r\n"
		"            var pre_x = pre_y = 0;\r\n"
		"            var x_end = x/5;\r\n"
		"            var y_end = y/5;\r\n"
		"            var max_count  = (radius_shaft - 10)/step;\r\n"
		"            var count = 1;\r\n"
		"            while(lineWidth >= 10)\r\n"
		"            {\r\n"
		"                var cur_x = Math.round(count * x_end / max_count);\r\n"
		"                var cur_y = Math.round(count * y_end / max_count);\r\n"
		"                console.log(cur_x);\r\n"
		"                ctx.lineWidth = lineWidth;\r\n"
		"                ctx.beginPath();\r\n"
		"                ctx.lineTo(pre_x, pre_y);\r\n"
		"                ctx.lineTo(cur_x, cur_y);\r\n"
		"                ctx.stroke();\r\n"
		"                lineWidth -= step;\r\n"
		"                pre_x = cur_x;\r\n"
		"                pre_y = cur_y;\r\n"
		"                count++;\r\n"
		"            }\r\n"
		"            var x_start = Math.round(x / 3);\r\n"
		"            var y_start = Math.round(y / 3);\r\n"
		"            lineWidth += step;\r\n"
		"            ctx.beginPath();\r\n"
		"            ctx.lineTo(pre_x, pre_y);\r\n"
		"            ctx.lineTo(x_start, y_start);\r\n"
		"            ctx.stroke();\r\n"
		"            count = 1;\r\n"
		"            pre_x = x_start;\r\n"
		"            pre_y = y_start;\r\n"
		"            while(lineWidth < radius_shaft)\r\n"
		"            {\r\n"
		"                var cur_x = Math.round(x_start + count * (x - x_start) / max_count);\r\n"
		"                var cur_y = Math.round(y_start + count * (y - y_start) / max_count);\r\n"
		"                ctx.lineWidth = lineWidth;\r\n"
		"                ctx.beginPath();\r\n"
		"                ctx.lineTo(pre_x, pre_y);\r\n"
		"                ctx.lineTo(cur_x, cur_y);\r\n"
		"                ctx.stroke();\r\n"
		"                lineWidth += step;\r\n"
		"                pre_x = cur_x;\r\n"
		"                pre_y = cur_y;\r\n"
		"                count++;\r\n"
		"            }\r\n"
		"            var grd = ctx.createRadialGradient(x, y, 0, x, y, radius_handle);\r\n"
		"            for(var i = 85; i >= 50; i-=5)\r\n"
		"                grd.addColorStop((85 - i)/35, \"hsl(0, 100%, \"+ i + \"%)\");\r\n"
		"            ctx.fillStyle = grd;\r\n"
		"            ctx.beginPath();\r\n"
		"            ctx.arc(x, y, radius_handle, 0, 2 * Math.PI);\r\n"
		"            ctx.fill();\r\n"
		"        }\r\n"
		"        function process_event(event)\r\n"
		"        {\r\n"
		"            var pos_x, pos_y;\r\n"
		"            if(event.offsetX)\r\n"
		"            {\r\n"
		"                pos_x = event.offsetX - canvas_width/2;\r\n"
		"                pos_y = event.offsetY - canvas_height/2;\r\n"
		"            }\r\n"
		"            else if(event.layerX)\r\n"
		"            {\r\n"
		"                pos_x = event.layerX - canvas_width/2;\r\n"
		"                pos_y = event.layerY - canvas_height/2;\r\n"
		"            }\r\n"
		"            else\r\n"
		"            {\r\n"
		"                pos_x = (Math.round(event.touches[0].pageX - event.touches[0].target.offsetLeft)) - canvas_width/2;\r\n"
		"                pos_y = (Math.round(event.touches[0].pageY - event.touches[0].target.offsetTop)) - canvas_height/2;\r\n"
		"            }\r\n"
		"            return {x:pos_x, y:pos_y}\r\n"
		"        }\r\n"
		"        function mouse_down()\r\n"
		"        {\r\n"
		"            if(ws == null)\r\n"
		"                return;\r\n"
		"            event.preventDefault();\r\n"
		"            var pos = process_event(event);\r\n"
		"            var delta_x = pos.x - joystick.x;\r\n"
		"            var delta_y = pos.y - joystick.y;\r\n"
		"            var dist = Math.sqrt(delta_x*delta_x + delta_y*delta_y);\r\n"
		"            if(dist > radius_handle)\r\n"
		"                return;\r\n"
		"            click_state = 1;\r\n"
		"            var radius = Math.sqrt(pos.x*pos.x + pos.y*pos.y);\r\n"
		"            if(radius <(range - radius_handle))\r\n"
		"            {\r\n"
		"                joystick = pos;\r\n"
		"                send_data();\r\n"
		"                update_view();\r\n"
		"            }\r\n"
		"        }\r\n"
		"        function mouse_up()\r\n"
		"        {\r\n"
		"            joystick.x=0;\r\n"
		"            joystick.y=0;\r\n"
		"            send_data();\r\n"
		"            update_view();\r\n"
		"            event.preventDefault();\r\n"
		"            click_state = 0;\r\n"
		"        }\r\n"
		"        function mouse_move()\r\n"
		"        {\r\n"
		"            if(ws == null)\r\n"
		"                return;\r\n"
		"            event.preventDefault();\r\n"
		"            if(!click_state)\r\n"
		"                return;\r\n"
		"            var pos = process_event(event);\r\n"
		"            var radius = Math.sqrt(pos.x*pos.x + pos.y*pos.y);\r\n"
		"            if(radius <(range - radius_handle))\r\n"
		"            {\r\n"
		"                joystick = pos;\r\n"
		"                send_data();\r\n"
		"                update_view();\r\n"
		"            }\r\n"
		"        }\r\n"
		"        window.onload = init;\r\n"
		"    </script>\r\n"
		"</head>\r\n"
		"<body>\r\n"
		"<h1>Arduino - Web-based Joystick</h1>\r\n"
		"<canvas id=\"remote\"></canvas>\r\n"
		"<h2>\r\n"
		"    <p>\r\n"
		"        WebSocket : <span id=\"ws_state\">null</span>\r\n"
		"    </p>\r\n"
		"    <button id=\"bt_connect\" type=\"button\" onclick=\"connect_onclick();\">Connect</button>\r\n"
		"</h2>\r\n"
		"</body>\r\n"
		"</html>\r\n"
		);
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
